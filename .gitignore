# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypi.org, pipenv is no longer the recommended tool for managing
#   dependencies. pip-tools is the recommended replacement.
Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to use the following settings:
#  https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and add them here.

# JetBrains IDEs
.idea/
*.iws
*.iml
*.ipr

# Visual Studio Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# MacOS
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

# Linux
*~

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

# ==========================================
# PROJECT SPECIFIC IGNORES
# ==========================================

# Modal specific
.modal/
modal_logs/
.modal_cache/

# Model files and cache (these are huge!)
models/
model_cache/
*.bin
*.safetensors
*.gguf
*.ggml
*.pt
*.pth
*.h5
*.onnx
*.tflite
*.pb

# Hugging Face cache
~/.cache/huggingface/
.cache/huggingface/
huggingface_cache/

# vLLM specific
.vllm_cache/
vllm_logs/

# Configuration files with secrets
config.yaml
config.yml
secrets.env
.secrets
credentials.json
service_account.json

# API keys and tokens
.env.local
.env.production
.env.staging
*.key
*.pem
*.crt
*.p12
*.pfx

# Logs
*.log
logs/
log/
*.out
*.err

# Temporary files
tmp/
temp/
.tmp/
.temp/

# Development and testing
test_outputs/
experiments/
scratch/
playground/
dev_notes.md
TODO.md

# Jupyter notebooks (optional - uncomment if you don't want to version control notebooks)
# *.ipynb

# Data files (usually too large for git)
data/
datasets/
*.csv
*.json
*.jsonl
*.parquet
*.pkl
*.pickle
*.npy
*.npz

# Docker
Dockerfile.local
docker-compose.override.yml
.dockerignore

# Backup files
*.bak
*.backup
*.swp
*.swo
*~

# OS generated files
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes

# SQLite databases
*.sqlite
*.sqlite3
*.db

# Redis dump files
dump.rdb

# Node.js (if you have any frontend components)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Coverage reports
htmlcov/
.coverage
coverage.xml
*.cover

# Profiling data
*.prof
*.pstats

# Memory dumps
*.dmp

# Editor swap files
*.swp
*.swo
*~

# Patch files
*.patch
*.diff

# Archive files
*.zip
*.tar.gz
*.tar.bz2
*.tar.xz
*.tgz
*.rar
*.7z
